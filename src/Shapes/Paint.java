/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Shapes;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JColorChooser;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
/**
 *
 * @author ADMIN
 */
public class Paint extends javax.swing.JFrame implements Node{

    // static int c,r,l,t,s=0;
    
    //this is the final edit
    
    static int index=0;

    public static int getIndex() {
        return index;
    }

    public static void setIndex(int index) {
        Paint.index = index;
    }

    public  JComboBox<String> getjComboBox1() {
        return jComboBox1;
    }
    

    /**
     * Creates new form Paint
     */
    public Paint() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        drawingArea1 = new Shapes.DrawingArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Paint");

        drawingArea1.setBackground(new java.awt.Color(255, 255, 255));
        drawingArea1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                drawingArea1MouseDragged(evt);
            }
        });
        drawingArea1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                drawingArea1MousePressed(evt);
            }
        });

        javax.swing.GroupLayout drawingArea1Layout = new javax.swing.GroupLayout(drawingArea1);
        drawingArea1.setLayout(drawingArea1Layout);
        drawingArea1Layout.setHorizontalGroup(
            drawingArea1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 649, Short.MAX_VALUE)
        );
        drawingArea1Layout.setVerticalGroup(
            drawingArea1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 511, Short.MAX_VALUE)
        );

        jButton1.setBackground(new java.awt.Color(198, 198, 246));
        jButton1.setText("Rectangle");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(198, 198, 246));
        jButton2.setText("Square");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(198, 198, 246));
        jButton3.setText("Line Segment");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(198, 198, 246));
        jButton4.setText("Oval");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(198, 198, 246));
        jButton5.setText("Delete");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setBackground(new java.awt.Color(198, 198, 246));
        jButton6.setText("Colorize");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jComboBox1.setToolTipText("");
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel1.setText(" Choose Shape");

        jCheckBox1.setText("Fill Shape");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jButton7.setBackground(new java.awt.Color(204, 204, 255));
        jButton7.setText("Triangle");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("Copy");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem1.setText("Save");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem2.setText("Load");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46))
            .addGroup(layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton8))
                .addGap(18, 18, 18)
                .addComponent(drawingArea1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(79, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(jButton7))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton6)
                            .addComponent(jButton5))
                        .addGap(18, 18, 18)
                        .addComponent(jCheckBox1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton8))
                    .addComponent(drawingArea1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        
        CircleWindow x = new CircleWindow (drawingArea1,Paint.this);
        this.setVisible(true);
        x.setParentNode(this);
        x.setVisible(true);
        
            //jComboBox1.addItem("Circle: " + (c+1));
            //c++;
            // jComboBox1.addItem("Circle: " + index);
            //index++;
            
        

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:


    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
       
        
        RectangleWindow x=new RectangleWindow(drawingArea1,Paint.this);
        this.setVisible(true);
        x.setParentNode(this);
        x.setVisible(true);
//        if (RectangleWindow.flag==1)
//            {
//                r++;
//                jComboBox1.addItem("Rectangle: " + r);
//                
//            }
//ComboBox1.addItem("Rectangle: " + index);
          // index++;

            
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
        SquareWindow x=new SquareWindow(drawingArea1,Paint.this);
        this.setVisible(true);
        x.setParentNode(this);
        x.setVisible(true);
        
        


    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
       
        LineWindow x=new LineWindow(drawingArea1,Paint.this);
        this.setVisible(true);
        x.setParentNode(this);
        x.setVisible(true);
      // jComboBox1.addItem("Line: " + (l+1));
          // l++;
           //jComboBox1.addItem("Line: " + index);
           // index++;
        
        
        
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        int j = jComboBox1.getSelectedIndex();
         index=0;
          DrawingArea.selectedIndex=-1;
        // jComboBox1.remove(jComboBox1.getSelectedIndex());
        //HERE
      //  drawingArea1.e.removeShape(drawingArea1.e.x.get(j-1));
      if (j>=0)
      {
        drawingArea1.x.remove(drawingArea1.x.get(j));
        //jComboBox1.removeItemAt(j);
        
        
        jComboBox1.removeAllItems();
        for (int i=0; i<drawingArea1.x.size();i++)
        {
            if (drawingArea1.x.get(i) instanceof Shapes.LineSeg)
            {jComboBox1.addItem("Line: " + (index+1)); index++;}
            
            if (drawingArea1.x.get(i) instanceof Shapes.Triangle)
            {jComboBox1.addItem("Triangle: " + (index+1)); index++;}
            if (drawingArea1.x.get(i) instanceof Shapes.Circle)
            {jComboBox1.addItem("Oval: " + (index+1)); index++;}

            if (drawingArea1.x.get(i) instanceof Shapes.Rectangle )
                
            {
                 Rectangle rect=(Rectangle)drawingArea1.x.get(i);
                 if (rect.getHeight()==rect.getWidth())
                     {jComboBox1.addItem("Square: " + (index+1)); index++;}
                 else
                     {jComboBox1.addItem("Rectangle: " + (index+1)); index++;}

            }

        }
        drawingArea1.repaint();
      } else 
      {
          JOptionPane.showMessageDialog(null, "Please select a shape");
      }

    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        int j = jComboBox1.getSelectedIndex();
        // Shape selected = drawingArea1.x.get(j);
        if(j>=0)
        {
        Color c = JColorChooser.showDialog(null, "Choose color", Color.black);
        // selected.setColor(c);
        
        //HERE
        //drawingArea1.e.x.get((j-1)).setColor(c); //use getShapes[]
        drawingArea1.x.get(j).setColor(c);
        drawingArea1.repaint();
        } else 
        {
            JOptionPane.showMessageDialog(null, "Please select a shape");
        }


    }//GEN-LAST:event_jButton6ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
        int j = jComboBox1.getSelectedIndex();
        if (jCheckBox1.isSelected() && j>=0) {
            Color c = JColorChooser.showDialog(null, "Choose fill Color", Color.yellow);
            //HERE
            //drawingArea1.e.x.get(j-1).setFillColor(c);
            drawingArea1.x.get(j).setFillColor(c);
            drawingArea1.repaint();
            jCheckBox1.setSelected(false);
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Please select a shape");
            jCheckBox1.setSelected(false);
        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void drawingArea1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawingArea1MouseDragged
        // TODO add your handling code here:
        
        
    }//GEN-LAST:event_drawingArea1MouseDragged

    private void drawingArea1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawingArea1MousePressed
       // TODO add your handling code here:
       
    //   Point p=evt.getPoint();
  
    }//GEN-LAST:event_drawingArea1MousePressed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
         
         TriangleWindow x=new TriangleWindow(drawingArea1,Paint.this);
         this.setVisible(true);
         x.setParentNode(this);
         x.setVisible(true);
//         
//            jComboBox1.addItem("Triangle: " + (t+1));
//            t++;

 //jComboBox1.addItem("Triangle: " + index);
            //index++;
        
        
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
   
        System.out.println("Save");
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Specify a file to save");
        fileChooser.setAcceptAllFileFilterUsed(false);
        FileFilter filter = new FileNameExtensionFilter("json file", new String[]{"json"});
        fileChooser.setFileFilter(filter);
        int userSelection = fileChooser.showSaveDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            try {
                save(fileToSave.getAbsolutePath());
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Paint.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void save(String filename) throws FileNotFoundException
    {
        PrintWriter pw = null;
        try {JSONArray x = new JSONArray();

        for (ShapesAbstractClass s : drawingArea1.x) {
            JSONObject obj = new JSONObject();
            if (s instanceof Rectangle r) {
                obj.put("shapetype", "rectangle");
                obj.put("x", r.getPosition().x);
                obj.put("y", r.getPosition().y);
                obj.put("width", r.getWidth());
                obj.put("height", r.getHeight());
                obj.put("color", r.getColor().getRGB());
                obj.put("fillcolor", r.getFillColor().getRGB());
            } else if (s instanceof LineSeg l) {
                obj.put("shapetype", "line");
                obj.put("x1", l.getPosition().x);
                obj.put("y1", l.getPosition().y);
                obj.put("x2", l.getEnd().x);
                obj.put("y2", l.getEnd().y);
                obj.put("color", l.getColor().getRGB());
            }
            else if (s instanceof Circle c)
            {
                obj.put("shapetype", "oval");
                obj.put("x", c.getPosition().x);
                obj.put("y", c.getPosition().y);
                obj.put("radius1", c.getHeightOval());
                obj.put("radius2", c.getWidthOval());
                obj.put("color", c.getColor().getRGB());
                
                obj.put("fillcolor", c.getFillColor().getRGB());
                System.out.println("save in rgb: "+c.getFillColor().getRGB());
            }
            else if (s instanceof Triangle t)
            {
                obj.put("shapetype", "triangle");
                obj.put("x1", t.getPosition().x);
                obj.put("y1", t.getPosition().y);
                obj.put("x2", t.getSecondPoint().x);
                obj.put("y2", t.getSecondPoint().y);
                obj.put("x3", t.getThirdPoint().x);
                obj.put("y3", t.getThirdPoint().y);
                obj.put("color", t.getColor().getRGB());
                obj.put("fillcolor", t.getFillColor().getRGB());
                
            }
              x.add(obj);
        }
            pw = new PrintWriter(new File(filename));
            pw.print(x);
            pw.close();
        }
        catch(FileNotFoundException ex)
        {
            Logger.getLogger(Paint.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            pw.close();
        }
    }
    
    
    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Specify a file to load");
        fileChooser.setAcceptAllFileFilterUsed(false);
        FileFilter filter = new FileNameExtensionFilter("json file", new String[]{"json"});
        fileChooser.setFileFilter(filter);
        int userSelection = fileChooser.showOpenDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            System.out.println("Save as file: " + fileToSave.getAbsolutePath());
            try {
                load(fileToSave.getAbsolutePath());
              }catch (IOException ex) {
                Logger.getLogger(Paint.class.getName()).log(Level.SEVERE, null, ex);
              }catch (ParseException ex) {
                Logger.getLogger(Paint.class.getName()).log(Level.SEVERE, null, ex);
             }
        }
        
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    
    private void load(String filename) throws FileNotFoundException, IOException, ParseException {
        drawingArea1.x.clear();
        jComboBox1.removeAllItems();
        index=0;
        DrawingArea.selectedIndex=-1;
        
        try{
        JSONParser parser = new JSONParser();
        Object obj = parser.parse(new FileReader(filename));
        JSONArray shapes = (JSONArray) obj;
        for (int i = 0; i < shapes.size(); i++) {
            JSONObject j = (JSONObject) shapes.get(i);

            if (j.get("shapetype").toString().equals("rectangle"))
            {
               String x = j.get("x").toString(); String y = j.get("y").toString();
               int pointX, pointY, width, height, rgb,rgb2;
                    pointX = Integer.parseInt(j.get("x").toString());
                    pointY = Integer.parseInt(j.get("y").toString());
                    width = Integer.parseInt(j.get("width").toString());
                    height = Integer.parseInt(j.get("height").toString());
                    rgb = Integer.parseInt(j.get("color").toString());
                    rgb2= Integer.parseInt(j.get("fillcolor").toString());
                    
                    Rectangle r = new Rectangle(new Point(pointX, pointY));
                    r.setHeight(height);
                    r.setWidth(width);
                    r.setColor(new Color(rgb));
                    
                    if (rgb2==0)
                        r.setFillColor(new Color(0,0,0,0));
                    else
                        r.setFillColor(new Color(rgb2));
                    
                    
                    
                    drawingArea1.x.add(r);
                    
                    jComboBox1.addItem("Rectangle: " + (index+1));
                    index++;
                    
            }else if (j.get("shapetype").equals("triangle"))
            {
               //Triangle t = new Triangle(new Point((int)j.get("x1"),(int)j.get("y1")),new Point((int)j.get("x2"),(int)j.get("y2")),new Point((int)j.get("x3"),(int)j.get("y3")));
               int Point1 = Integer.parseInt(j.get("x1").toString());
               int Point2 = Integer.parseInt(j.get("y1").toString());
               int Point3 = Integer.parseInt(j.get("x2").toString());
               int Point4 = Integer.parseInt(j.get("y2").toString());
               int Point5 = Integer.parseInt(j.get("x3").toString());
               int Point6 = Integer.parseInt(j.get("y3").toString());
               int rgb = Integer.parseInt(j.get("color").toString());
               int rgb2 = Integer.parseInt(j.get("fillcolor").toString());
               Triangle t = new Triangle(new Point(Point1,Point2),new Point(Point3, Point4), new Point(Point5,Point6));
               t.setColor(new Color(rgb));
               
               if (rgb2==0)
                    t.setFillColor(new Color(0,0,0,0));
                else
                    t.setFillColor(new Color(rgb2));
               
               
                 drawingArea1.x.add(t);
                 
                 jComboBox1.addItem("Triangle: " + (index+1));
                 index++;
               
            
            
            }else if (j.get("shapetype").equals("line"))
            {
               // LineSeg l = new LineSeg(new Point((int)j.get("x1"),(int)j.get("y1")));
                
                //l.setEnd(new Point((int)j.get("x2"),(int)j.get("y2")));
                int pointA= Integer.parseInt(j.get("x1").toString());
                int pointB=Integer.parseInt(j.get("y1").toString());
                int pointC=Integer.parseInt(j.get("x2").toString());
                int pointD=Integer.parseInt(j.get("y2").toString());
                int rgb = Integer.parseInt(j.get("color").toString());
                LineSeg l = new LineSeg(new Point(pointA,pointB));
                l.setEnd(new Point(pointC,pointD));
                l.setColor(new Color(rgb));
                drawingArea1.x.add(l);
                
                jComboBox1.addItem("Line: " + (index+1));
                index++;
                
               
                
            }else if(j.get("shapetype").equals("oval"))
            {
                int pointX = Integer.parseInt(j.get("x").toString());
                int pointY = Integer.parseInt(j.get("y").toString());
                Circle c = new Circle(new Point(pointX,pointY));
                int horizontalR=Integer.parseInt(j.get("radius2").toString());
                int verticalR=Integer.parseInt(j.get("radius1").toString());
                int rgb = Integer.parseInt(j.get("color").toString());
               
                
                int rgb2 = Integer.parseInt(j.get("fillcolor").toString());
                if (rgb2==0)
                    c.setFillColor(new Color(0,0,0,0));
                else
                    c.setFillColor(new Color(rgb2));
                
                c.setHeightOval(verticalR);
                c.setWidthOval(horizontalR);
                c.setColor(new Color(rgb));
                
              drawingArea1.x.add(c);
              
              jComboBox1.addItem("Oval: "+(index+1));
              index++;
                
        
        }
            drawingArea1.repaint();
        }
        }catch (IOException ex) {
            Logger.getLogger(Paint.class.getName()).log(Level.SEVERE, null, ex);

            } catch (ParseException ex) {
            Logger.getLogger(Paint.class.getName()).log(Level.SEVERE, null, ex);
        }
        }

       
    

    
    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
       
        int i=jComboBox1.getSelectedIndex();
        
        if (i>=0) {
            
            if (drawingArea1.x.get(i) instanceof Shapes.Rectangle)
        {
            Point p= drawingArea1.x.get(i).getPosition();
            Rectangle newRect= new Rectangle(p);
            
            Rectangle oldRect=(Rectangle)drawingArea1.x.get(i);
            int w=oldRect.getWidth();
            int h=oldRect.getHeight();
            
            newRect.setWidth(w);
            newRect.setHeight(h);
            newRect.setColor(oldRect.getColor());
            newRect.setFillColor(oldRect.getFillColor());
            
            drawingArea1.x.add(newRect);
            drawingArea1.repaint();
            if (w==h)
            {jComboBox1.addItem("Square: " + (index+1)); index++;}
            else
            {jComboBox1.addItem("Rectangle: " + (index+1)); index++;}
            
 
        }
        
        else if (drawingArea1.x.get(i) instanceof Shapes.Triangle)
        {
            
            Triangle oldT= (Triangle)drawingArea1.x.get(i);
            Point p1= oldT.getPosition();
            Point p2=oldT.getSecondPoint();
            Point p3=oldT.getThirdPoint();
            
            Triangle newT= new Triangle(p1,p2,p3);
            newT.setColor(oldT.getColor());
            newT.setFillColor(oldT.getFillColor());
            drawingArea1.x.add(newT);
            drawingArea1.repaint();
            jComboBox1.addItem("Triangle: " + (index+1)); index++;
            

        
        }
        
        else if(drawingArea1.x.get(i) instanceof Shapes.Circle)
        {
            Circle old=(Circle)drawingArea1.x.get(i);
            Point p=drawingArea1.x.get(i).getPosition();
            int v=old.getHeightOval();
            int h=old.getWidthOval();
            
            Circle c= new Circle(p);
            c.setHeightOval(v);
            c.setWidthOval(h);
            
            c.setColor(old.getColor());
            c.setFillColor(old.getFillColor());
            
            drawingArea1.x.add(c);
            drawingArea1.repaint();
            jComboBox1.addItem("Oval: " + (index+1)); index++;
            

        
        }
        
        else if (drawingArea1.x.get(i) instanceof Shapes.LineSeg)
        {
            LineSeg old=(LineSeg)drawingArea1.x.get(i);
            Point p=old.getPosition();
            Point end=old.getEnd();
            
            LineSeg newLine = new LineSeg(p);
            newLine.setEnd(end);
            newLine.setColor(old.getColor());
            drawingArea1.x.add(newLine);
            drawingArea1.repaint();
            jComboBox1.addItem("Line: " + (index+1)); index++;
            
        
        
        }
            
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Please select a shape");
            
        }
        
    
     
    }//GEN-LAST:event_jButton8ActionPerformed

    private boolean isNum(String x) {
        return x != null && x.matches("[-+]?\\d*\\.?\\d+") && !x.startsWith("-");
    }

    public void setComboBox(int i)
    {
        jComboBox1.setSelectedIndex(i);
    }
    
//    public void updateComboIndex(int i){
//        jComboBox1.setSelectedIndex(i);
//    }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Paint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Paint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Paint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Paint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Paint().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private Shapes.DrawingArea drawingArea1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    // End of variables declaration//GEN-END:variables

    @Override
    public Node getParentNode() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void setParentNode(Node node) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
